{% comment %} Esquema da Seção {% endcomment %}
{% schema %}
{
  "name": "Carrossel Produtos",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Título da Seção",
      "default": "Nossos Produtos"
    },
    {
      "type": "collection",
      "id": "featured_collection",
      "label": "Escolha a Coleção"
    },
    {
      "type": "range",
      "id": "products_limit",
      "min": 3,
      "max": 12,
      "step": 1,
      "label": "Número de Produtos a Mostrar",
      "default": 6
    },
    {
      "type": "range",
      "id": "products_per_view",
      "min": 1,
      "max": 4,
      "step": 1,
      "label": "Produtos Visíveis por Vez (Desktop)",
      "default": 3
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay (Troca automática)",
      "default": false
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "min": 2000,
      "max": 9000,
      "step": 1000,
      "unit": "ms",
      "label": "Velocidade do Autoplay",
      "default": 5000,
      "info": "Tempo em milissegundos entre as trocas."
    }
  ],
  "presets": [
    {
      "name": "Carrossel de Produtos Simples"
    }
  ]
}
{% endschema %}

{% comment %} CSS da Seção {% endcomment %}
<style>
  .simple-carousel-section-{{ section.id }} {
    padding-top: 30px;
    padding-bottom: 30px;
    position: relative;
  }

  .simple-carousel-section-{{ section.id }} .section-header {
    margin-bottom: 30px;
    font-size: 24px;
    text-align: center;
  }

  .simple-carousel-container-{{ section.id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
    margin: 0 auto;
    max-width: 1200px; /* Ou a largura que preferir */
  }

  .simple-carousel-track-{{ section.id }} {
    display: flex;
    transition: transform 0.5s ease-in-out;
    /* Não defina a largura aqui, será calculada por JS */
  }

  .simple-carousel-slide-{{ section.id }} {
    /* A largura será definida por JS baseado em products_per_view */
    flex-shrink: 0; /* Impede que os slides encolham */
    padding: 0 10px; /* Espaçamento entre os slides */
    box-sizing: border-box;
  }

  .simple-carousel-product-card {
    display: block;
    text-decoration: none;
    color: inherit;
    border: 1px solid #eee;
    border-radius: 4px;
    overflow: hidden;
    text-align: center;
  }

  .simple-carousel-product-image-wrapper {
    width: 100%;
    height: 200px; /* Ajuste conforme necessário */
    overflow: hidden;
  }

  .simple-carousel-product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .simple-carousel-product-info {
    padding: 15px;
  }

  .simple-carousel-product-title {
    font-size: 16px;
    font-weight: bold;
    margin: 0 0 5px 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .simple-carousel-product-price {
    font-size: 14px;
  }

  .simple-carousel-nav-{{ section.id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 40px;
    height: 40px;
    background-color: rgba(0,0,0,0.5);
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
  }

  .simple-carousel-prev-{{ section.id }} {
    left: 15px;
  }

  .simple-carousel-next-{{ section.id }} {
    right: 15px;
  }
  
  .simple-carousel-nav-{{ section.id }}:disabled {
    opacity: 0.3;
    cursor: default;
  }

  /* Responsividade básica para produtos por visualização */
  @media (max-width: 990px) {
    /* Ajuste products_per_view para tablets se necessário, ou deixe o JS recalcular */
  }
  @media (max-width: 749px) {
    /* No mobile, geralmente 1 ou 1.x produtos são melhores */
    /* O JS tentará ajustar para 1 produto em telas pequenas */
     .simple-carousel-slide-{{ section.id }} {
        /* A largura será recalculada pelo JS */
     }
  }

</style>

{% comment %} HTML e Liquid da Seção {% endcomment %}
<div class="simple-carousel-section-{{ section.id }} page-width">
  {% if section.settings.title != blank %}
    <h2 class="section-header">{{ section.settings.title | escape }}</h2>
  {% endif %}

  {%- liquid
    assign collection = collections[section.settings.featured_collection]
    assign products_limit = section.settings.products_limit
    assign products_per_view_desktop = section.settings.products_per_view
  -%}

  {% if collection.products.size > 0 %}
    <div class="simple-carousel-container-{{ section.id }}">
      <div class="simple-carousel-track-{{ section.id }}">
        {% for product in collection.products limit: products_limit %}
          <div class="simple-carousel-slide-{{ section.id }}">
            <a href="{{ product.url | within: collection }}" class="simple-carousel-product-card">
              <div class="simple-carousel-product-image-wrapper">
                {% if product.featured_image %}
                  <img src="{{ product.featured_image | image_url: width: 400, height: 400, crop: 'center' }}"
                       alt="{{ product.featured_image.alt | escape }}"
                       loading="lazy"
                       class="simple-carousel-product-image">
                {% else %}
                  {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg simple-carousel-product-image' }}
                {% endif %}
              </div>
              <div class="simple-carousel-product-info">
                <h3 class="simple-carousel-product-title">{{ product.title }}</h3>
                <p class="simple-carousel-product-price">{{ product.price | money }}</p>
              </div>
            </a>
          </div>
        {% endfor %}
      </div>
      <button class="simple-carousel-nav-{{ section.id }} simple-carousel-prev-{{ section.id }}" aria-label="Anterior">&#10094;</button>
      <button class="simple-carousel-nav-{{ section.id }} simple-carousel-next-{{ section.id }}" aria-label="Próximo">&#10095;</button>
    </div>
  {% else %}
    {% if section.settings.featured_collection == blank %}
      <p class="text-center">Por favor, selecione uma coleção nas configurações da seção.</p>
    {% else %}
      <p class="text-center">A coleção selecionada não possui produtos.</p>
    {% endif %}
  {% endif %}
</div>

{% comment %} JavaScript da Seção {% endcomment %}
<script>
  function initializeSimpleCarousel{{ section.id }}() {
    const container = document.querySelector('.simple-carousel-container-{{ section.id }}');
    const track = document.querySelector('.simple-carousel-track-{{ section.id }}');
    const slides = Array.from(track.children);
    const nextButton = document.querySelector('.simple-carousel-next-{{ section.id }}');
    const prevButton = document.querySelector('.simple-carousel-prev-{{ section.id }}');

    if (!track || !nextButton || !prevButton || slides.length === 0) {
      console.warn('[SimpleCarousel {{ section.id }}]: Elementos essenciais não encontrados ou sem slides.');
      if(nextButton) nextButton.style.display = 'none';
      if(prevButton) prevButton.style.display = 'none';
      return;
    }

    let currentIndex = 0;
    let productsPerViewSetting = parseInt('{{ products_per_view_desktop }}') || 3;
    let productsPerView = productsPerViewSetting; // Valor inicial
    let slideWidth = 0; // Será calculado
    let totalSlides = slides.length;
    let autoplayInterval = null;
    const autoplayEnabled = {{ section.settings.autoplay }};
    const autoplaySpeed = parseInt('{{ section.settings.autoplay_speed }}') || 5000;

    function calculateSlideWidthAndApply() {
      const containerWidth = container.offsetWidth;
      // Ajuste para telas menores
      if (window.innerWidth < 750 && window.innerWidth >= 480 && productsPerViewSetting > 2) {
        productsPerView = 2;
      } else if (window.innerWidth < 480 && productsPerViewSetting > 1) {
        productsPerView = 1;
      } else {
        productsPerView = productsPerViewSetting;
      }

      slideWidth = containerWidth / productsPerView;
      slides.forEach(slide => {
        slide.style.width = `${slideWidth}px`;
      });
      track.style.width = `${slideWidth * totalSlides}px`;
      updateCarouselPosition(false); // Não animar ao recalcular
    }

    function updateCarouselPosition(animate = true) {
      if (animate) {
        track.style.transition = 'transform 0.5s ease-in-out';
      } else {
        track.style.transition = 'none';
      }
      track.style.transform = `translateX(-${currentIndex * slideWidth}px)`;
      updateNavButtons();
    }

    function updateNavButtons() {
      prevButton.disabled = currentIndex === 0;
      // Se houver X slides visíveis, o último "passo" é quando o primeiro dos X slides visíveis é o slide (totalSlides - X)
      const maxIndex = totalSlides - productsPerView;
      nextButton.disabled = currentIndex >= maxIndex || totalSlides <= productsPerView;
       // Esconder botões se todos os slides estiverem visíveis
      if (totalSlides <= productsPerView) {
        prevButton.style.display = 'none';
        nextButton.style.display = 'none';
      } else {
        prevButton.style.display = 'flex'; // 'flex' por causa do display:flex nos estilos
        nextButton.style.display = 'flex';
      }
    }

    function moveToNext() {
      const maxIndex = totalSlides - productsPerView;
      if (currentIndex < maxIndex) {
        currentIndex++;
      } else if (autoplayEnabled) { // Para autoplay, volta ao início
        currentIndex = 0;
      }
      updateCarouselPosition();
    }

    function moveToPrev() {
      if (currentIndex > 0) {
        currentIndex--;
      }
      updateCarouselPosition();
    }
    
    function startAutoplay() {
      if (!autoplayEnabled || totalSlides <= productsPerView) return;
      stopAutoplay(); // Garante que não haja múltiplos intervalos
      autoplayInterval = setInterval(moveToNext, autoplaySpeed);
    }

    function stopAutoplay() {
      clearInterval(autoplayInterval);
    }

    // Event Listeners
    nextButton.addEventListener('click', () => {
      moveToNext();
      stopAutoplay(); // Para autoplay quando navega manualmente
      if(autoplayEnabled) startAutoplay(); // Reinicia se quiser
    });
    prevButton.addEventListener('click', () => {
      moveToPrev();
      stopAutoplay();
      if(autoplayEnabled) startAutoplay();
    });
    
    // Opcional: pausar autoplay no hover
    if (autoplayEnabled) {
        container.addEventListener('mouseenter', stopAutoplay);
        container.addEventListener('mouseleave', startAutoplay);
    }

    // Recalcular em redimensionamento da janela
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        calculateSlideWidthAndApply();
        // O currentIndex pode precisar ser reavaliado se productsPerView mudar drasticamente
        const maxIndex = totalSlides - productsPerView;
        if (currentIndex > maxIndex) {
            currentIndex = maxIndex < 0 ? 0 : maxIndex;
        }
        updateCarouselPosition(false);
        startAutoplay(); // Reinicia o autoplay com novas dimensões
      }, 250);
    });

    // Inicialização
    calculateSlideWidthAndApply(); // Calcula e aplica larguras iniciais
    startAutoplay(); // Inicia o autoplay se habilitado
  }

  // Garante que o DOM está pronto e a seção está visível
  function setupSimpleCarouselListeners{{ section.id }}() {
    const sectionElement = document.querySelector('.simple-carousel-section-{{ section.id }}');
    if (!sectionElement) {
      // Tenta novamente se a seção não estiver pronta, mas com limite
      let retries = 5;
      function attemptSetup() {
        if (retries <=0) return;
        const el = document.querySelector('.simple-carousel-section-{{ section.id }}');
        if (el) {
          initializeSimpleCarousel{{ section.id }}();
        } else {
          retries--;
          setTimeout(attemptSetup, 200);
        }
      }
      attemptSetup();
      return;
    }
    
    // Verifica se já inicializou para evitar múltiplas instâncias no editor de temas
    if (sectionElement.dataset.simpleCarouselInitialized === 'true') {
        // Poderia ter uma lógica de "destroy" se fosse mais complexo,
        // mas para este carrossel, apenas re-inicializar pode ser o suficiente
        // ou simplesmente não fazer nada se já estiver ok.
        // Por agora, vamos permitir a re-inicialização para que as configurações sejam aplicadas.
    }
    initializeSimpleCarousel{{ section.id }}();
    sectionElement.dataset.simpleCarouselInitialized = 'true';

  }

  document.addEventListener('shopify:section:load', function(event) {
    const sectionElement = document.querySelector('.simple-carousel-section-{{ section.id }}');
    if (event.target === sectionElement) {
      setupSimpleCarouselListeners{{ section.id }}();
    }
  });

  document.addEventListener('shopify:section:select', function(event) {
    const sectionElement = document.querySelector('.simple-carousel-section-{{ section.id }}');
     if (event.target === sectionElement) {
      setupSimpleCarouselListeners{{ section.id }}();
    }
  });

  if (document.readyState === 'complete' || (document.readyState !== 'loading' && !document.documentElement.doScroll)) {
    setupSimpleCarouselListeners{{ section.id }}();
  } else {
    document.addEventListener('DOMContentLoaded', function() {
      setupSimpleCarouselListeners{{ section.id }}();
    });
  }
</script>
