{% comment %} Esquema da Seção {% endcomment %}
{% schema %}
{
  "name": "Carrossel Produtos",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Título da Seção",
      "default": "Nossos Produtos"
    },
    {
      "type": "collection",
      "id": "featured_collection",
      "label": "Escolha a Coleção"
    },
    {
      "type": "range",
      "id": "products_limit",
      "min": 3,
      "max": 12,
      "step": 1,
      "label": "Número de Produtos a Mostrar",
      "default": 6
    },
    {
      "type": "range",
      "id": "products_per_view",
      "min": 1,
      "max": 4,
      "step": 1,
      "label": "Produtos Visíveis por Vez (Desktop)",
      "default": 3
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Autoplay (Troca automática)",
      "default": false
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "min": 2000,
      "max": 9000,
      "step": 1000,
      "unit": "ms",
      "label": "Velocidade do Autoplay",
      "default": 5000,
      "info": "Tempo em milissegundos entre as trocas."
    }
  ],
  "presets": [
    {
      "name": "Carrossel de Produtos Simples"
    }
  ]
}
{% endschema %}

{% comment %} CSS da Seção {% endcomment %}
<style>
  .simple-carousel-section-{{ section.id }} {
    padding-top: 30px;
    padding-bottom: 30px;
    position: relative;
  }

  .simple-carousel-section-{{ section.id }} .section-header {
    margin-bottom: 30px;
    font-size: 24px;
    text-align: center;
  }

  .simple-carousel-container-{{ section.id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
    margin: 0 auto;
    max-width: 1200px; /* Ou a largura que preferir */
  }

  .simple-carousel-track-{{ section.id }} {
    display: flex;
    transition: transform 0.5s ease-in-out;
    /* Não defina a largura aqui, será calculada por JS */
  }

  .simple-carousel-slide-{{ section.id }} {
    /* A largura será definida por JS baseado em products_per_view */
    flex-shrink: 0; /* Impede que os slides encolham */
    padding: 0 10px; /* Espaçamento entre os slides */
    box-sizing: border-box;
  }

  .simple-carousel-product-card {
    display: block;
    text-decoration: none;
    color: inherit;
    border: 1px solid #eee;
    border-radius: 4px;
    overflow: hidden;
    text-align: center;
  }

  .simple-carousel-product-image-wrapper {
    width: 100%;
    height: 200px; /* Ajuste conforme necessário */
    overflow: hidden;
  }

  .simple-carousel-product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .simple-carousel-product-info {
    padding: 15px;
  }

  .simple-carousel-product-title {
    font-size: 16px;
    font-weight: bold;
    margin: 0 0 5px 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .simple-carousel-product-price {
    font-size: 14px;
  }

  .simple-carousel-nav-{{ section.id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 40px;
    height: 40px;
    background-color: rgba(0,0,0,0.5);
    color: white;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
  }

  .simple-carousel-prev-{{ section.id }} {
    left: 15px;
  }

  .simple-carousel-next-{{ section.id }} {
    right: 15px;
  }
  
  .simple-carousel-nav-{{ section.id }}:disabled {
    opacity: 0.3;
    cursor: default;
  }

  /* Responsividade básica para produtos por visualização */
  @media (max-width: 990px) {
    /* Ajuste products_per_view para tablets se necessário, ou deixe o JS recalcular */
  }
  @media (max-width: 749px) {
    /* No mobile, geralmente 1 ou 1.x produtos são melhores */
    /* O JS tentará ajustar para 1 produto em telas pequenas */
     .simple-carousel-slide-{{ section.id }} {
        /* A largura será recalculada pelo JS */
     }
  }

</style>

{% comment %} HTML e Liquid da Seção {% endcomment %}
<div class="simple-carousel-section-{{ section.id }} page-width">
  {% if section.settings.title != blank %}
    <h2 class="section-header">{{ section.settings.title | escape }}</h2>
  {% endif %}

  {%- liquid
    assign collection = collections[section.settings.featured_collection]
    assign products_limit = section.settings.products_limit
    assign products_per_view_desktop = section.settings.products_per_view
  -%}

  {% if collection.products.size > 0 %}
    <div class="simple-carousel-container-{{ section.id }}">
      <div class="simple-carousel-track-{{ section.id }}">
        {% for product in collection.products limit: products_limit %}
          <div class="simple-carousel-slide-{{ section.id }}">
            <a href="{{ product.url | within: collection }}" class="simple-carousel-product-card">
              <div class="simple-carousel-product-image-wrapper">
                {% if product.featured_image %}
                  <img src="{{ product.featured_image | image_url: width: 400, height: 400, crop: 'center' }}"
                       alt="{{ product.featured_image.alt | escape }}"
                       loading="lazy"
                       class="simple-carousel-product-image">
                {% else %}
                  {{ 'product-1' | placeholder_svg_tag: 'placeholder-svg simple-carousel-product-image' }}
                {% endif %}
              </div>
              <div class="simple-carousel-product-info">
                <h3 class="simple-carousel-product-title">{{ product.title }}</h3>
                <p class="simple-carousel-product-price">{{ product.price | money }}</p>
              </div>
            </a>
          </div>
        {% endfor %}
      </div>
      <button class="simple-carousel-nav-{{ section.id }} simple-carousel-prev-{{ section.id }}" aria-label="Anterior">&#10094;</button>
      <button class="simple-carousel-nav-{{ section.id }} simple-carousel-next-{{ section.id }}" aria-label="Próximo">&#10095;</button>
    </div>
  {% else %}
    {% if section.settings.featured_collection == blank %}
      <p class="text-center">Por favor, selecione uma coleção nas configurações da seção.</p>
    {% else %}
      <p class="text-center">A coleção selecionada não possui produtos.</p>
    {% endif %}
  {% endif %}
</div>

{% comment %} JavaScript da Seção {% endcomment %}
<script>
  function initializeSimpleCarousel{{ section.id }}() {
    const sectionId = '{{ section.id }}'; // Para logs mais claros
    const container = document.querySelector('.simple-carousel-container-' + sectionId);
    const track = document.querySelector('.simple-carousel-track-' + sectionId);
    const slidesNodeList = track ? track.children : [];
    const slides = Array.from(slidesNodeList);
    const nextButton = document.querySelector('.simple-carousel-next-' + sectionId);
    const prevButton = document.querySelector('.simple-carousel-prev-' + sectionId);

    if (!container || !track || !nextButton || !prevButton || slides.length === 0) {
      console.warn('[SimpleCarousel ' + sectionId + ']: Elementos essenciais não encontrados ou sem slides. Verifique seletores e HTML.');
      if(nextButton) nextButton.style.display = 'none';
      if(prevButton) prevButton.style.display = 'none';
      return;
    }

    let currentIndex = 0;
    let productsPerViewSetting = parseInt('{{ section.settings.products_per_view }}', 10) || 3;
    let productsPerView = productsPerViewSetting;
    let slideWidth = 0;
    const totalSlides = slides.length;
    let autoplayInterval = null;
    const autoplayEnabled = {{ section.settings.autoplay }};
    const autoplaySpeed = parseInt('{{ section.settings.autoplay_speed }}', 10) || 5000;

    function calculateSlideWidthAndApply() {
      const currentContainerWidth = container.offsetWidth;
      if (currentContainerWidth === 0) {
        // Se o container não tem largura (ex: display:none), não faz nada.
        // Isso pode acontecer durante o carregamento ou se a seção estiver oculta.
        console.warn('[SimpleCarousel ' + sectionId + ']: Largura do container é 0. Carrossel não pode ser calculado.');
        return;
      }

      // Ajusta produtos por visualização com base na largura da tela
      if (window.innerWidth < 480) { // Mobile pequeno
        productsPerView = 1;
      } else if (window.innerWidth < 750) { // Mobile maior / Tablet pequeno
        productsPerView = Math.min(productsPerViewSetting, 2); // No máximo 2, ou o configurado se for menor
      } else {
        productsPerView = productsPerViewSetting;
      }

      slideWidth = currentContainerWidth / productsPerView;
      
      slides.forEach(slide => {
        slide.style.width = slideWidth + 'px';
      });
      
      // A largura do track não precisa ser definida explicitamente se os slides têm largura fixa e display:flex
      // track.style.width = (slideWidth * totalSlides) + 'px'; // Pode ser desnecessário
      
      updateCarouselPosition(false); // Atualiza a posição sem animar
    }

    function updateCarouselPosition(animate = true) {
      if (animate) {
        track.style.transition = 'transform 0.5s ease-in-out';
      } else {
        track.style.transition = 'none';
      }
      const newTransform = -(currentIndex * slideWidth);
      track.style.transform = 'translateX(' + newTransform + 'px)';
      updateNavButtons();
    }

    function updateNavButtons() {
      prevButton.disabled = currentIndex === 0;
      
      // O índice máximo é alcançado quando o último "grupo" de slides está visível.
      // Se totalSlides = 6 e productsPerView = 3, os grupos são [0,1,2] e [3,4,5].
      // currentIndex pode ir de 0 até totalSlides - productsPerView.
      // Se totalSlides <= productsPerView, não há para onde mover.
      const maxPossibleIndex = Math.max(0, totalSlides - productsPerView);
      nextButton.disabled = currentIndex >= maxPossibleIndex || totalSlides <= productsPerView;

      if (totalSlides <= productsPerView) {
        prevButton.style.display = 'none';
        nextButton.style.display = 'none';
      } else {
        prevButton.style.display = 'flex';
        nextButton.style.display = 'flex';
      }
    }

    function moveToNext() {
      const maxPossibleIndex = Math.max(0, totalSlides - productsPerView);
      if (currentIndex < maxPossibleIndex) {
        currentIndex++;
      } else if (autoplayEnabled && totalSlides > productsPerView) { // Loop para autoplay
        currentIndex = 0;
      }
      updateCarouselPosition();
    }

    function moveToPrev() {
      if (currentIndex > 0) {
        currentIndex--; // Decremento válido
      }
      updateCarouselPosition();
    }
    
    function startAutoplay() {
      if (!autoplayEnabled || totalSlides <= productsPerView) return;
      stopAutoplay(); 
      autoplayInterval = setInterval(moveToNext, autoplaySpeed);
    }

    function stopAutoplay() {
      clearInterval(autoplayInterval);
    }

    nextButton.addEventListener('click', function() {
      moveToNext();
      stopAutoplay();
      if (autoplayEnabled && totalSlides > productsPerView) { // Reinicia se o autoplay estiver ativo e houver para onde ir
        startAutoplay();
      }
    });

    prevButton.addEventListener('click', function() {
      moveToPrev();
      stopAutoplay();
      if (autoplayEnabled && totalSlides > productsPerView) {
        startAutoplay();
      }
    });
    
    if (autoplayEnabled) {
      container.addEventListener('mouseenter', stopAutoplay);
      container.addEventListener('mouseleave', startAutoplay);
    }

    let resizeTimeout;
    window.addEventListener('resize', function() {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(function() {
        calculateSlideWidthAndApply();
        // Reajusta currentIndex se ele se tornar inválido após o redimensionamento
        const maxPossibleIndex = Math.max(0, totalSlides - productsPerView);
        if (currentIndex > maxPossibleIndex) {
          currentIndex = maxPossibleIndex;
        }
        updateCarouselPosition(false); // Atualiza sem animação
        if (autoplayEnabled) { // Reinicia autoplay após redimensionamento
            startAutoplay();
        }
      }, 250);
    });

    // Inicialização
    calculateSlideWidthAndApply(); 
    startAutoplay();
    console.log('[SimpleCarousel ' + sectionId + ']: Inicializado com ' + totalSlides + ' slides. Produtos por visualização: ' + productsPerView);
  }

  // Função para configurar os listeners e garantir que o DOM está pronto
  function setupSimpleCarousel{{ section.id }}() {
    const sectionElement = document.querySelector('.simple-carousel-section-{{ section.id }}');
    
    if (!sectionElement) {
      // console.warn('[SimpleCarousel {{ section.id }}]: Elemento da seção não encontrado para configurar listeners.');
      return; // Sai se o elemento da seção não for encontrado
    }

    // Evitar múltiplas inicializações no editor de temas
    if (sectionElement.dataset.simpleCarouselInitialized === 'true' && sectionElement.swiperInstance) {
        // Se precisar de uma lógica de "destruição" mais complexa, adicione aqui.
        // Por agora, uma simples re-inicialização pode ser suficiente se as configurações mudarem.
        // Ou apenas retorne se não houver necessidade de re-inicializar sempre.
    }
    
    initializeSimpleCarousel{{ section.id }}();
    sectionElement.dataset.simpleCarouselInitialized = 'true'; 
  }

  // Eventos do Editor de Temas do Shopify
  document.addEventListener('shopify:section:load', function(event) {
    if (event.detail && event.detail.sectionId === '{{ section.id }}') {
      setupSimpleCarousel{{ section.id }}();
    }
  });

  document.addEventListener('shopify:section:select', function(event) {
    if (event.detail && event.detail.sectionId === '{{ section.id }}') {
      // A seleção da seção no editor pode exigir reinicialização para refletir mudanças nas configurações
      setupSimpleCarousel{{ section.id }}();
    }
  });

  // Carregamento Padrão da Página
  if (document.readyState === 'complete' || (document.readyState !== 'loading' && !document.documentElement.doScroll)) {
    setupSimpleCarousel{{ section.id }}();
  } else {
    document.addEventListener('DOMContentLoaded', function() {
      setupSimpleCarousel{{ section.id }}();
    });
  }
</script>
